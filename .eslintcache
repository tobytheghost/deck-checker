[{"F:\\react-apps\\deck-checker\\src\\App.js":"1","F:\\react-apps\\deck-checker\\src\\index.js":"2","F:\\react-apps\\deck-checker\\src\\views\\index.js":"3","F:\\react-apps\\deck-checker\\src\\views\\Error\\Error.js":"4","F:\\react-apps\\deck-checker\\src\\views\\Home\\Home.js":"5","F:\\react-apps\\deck-checker\\src\\views\\Login\\Login.js":"6","F:\\react-apps\\deck-checker\\src\\components\\index.js":"7","F:\\react-apps\\deck-checker\\src\\components\\VisualSearch\\VisualSearch.js":"8","F:\\react-apps\\deck-checker\\src\\components\\Search\\Search.js":"9","F:\\react-apps\\deck-checker\\src\\Reducer.js":"10","F:\\react-apps\\deck-checker\\src\\firebase.js":"11","F:\\react-apps\\deck-checker\\src\\components\\Header\\Header.js":"12","F:\\react-apps\\deck-checker\\src\\Routes.js":"13","F:\\react-apps\\deck-checker\\src\\views\\SearchPage\\SearchPage.js":"14","F:\\react-apps\\deck-checker\\src\\helpers.js":"15","F:\\react-apps\\deck-checker\\src\\components\\QR\\QR.js":"16","F:\\react-apps\\deck-checker\\src\\views\\Profile\\Profile.js":"17","F:\\react-apps\\deck-checker\\src\\StateProvider.js":"18","F:\\react-apps\\deck-checker\\src\\views\\Deck\\Deck.js":"19","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\Search\\Search.js":"20","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\index.js":"21","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\List\\List.js":"22","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\DeckTabs.js":"23"},{"size":806,"mtime":1609162695700,"results":"24","hashOfConfig":"25"},{"size":408,"mtime":1608841924200,"results":"26","hashOfConfig":"25"},{"size":307,"mtime":1609444451533,"results":"27","hashOfConfig":"25"},{"size":110,"mtime":1608995991233,"results":"28","hashOfConfig":"25"},{"size":3364,"mtime":1609198312985,"results":"29","hashOfConfig":"25"},{"size":1351,"mtime":1609177393716,"results":"30","hashOfConfig":"25"},{"size":139,"mtime":1609441309669,"results":"31","hashOfConfig":"25"},{"size":2702,"mtime":1608840664955,"results":"32","hashOfConfig":"25"},{"size":2754,"mtime":1609094484263,"results":"33","hashOfConfig":"25"},{"size":601,"mtime":1609160571834,"results":"34","hashOfConfig":"25"},{"size":609,"mtime":1608841579322,"results":"35","hashOfConfig":"25"},{"size":2915,"mtime":1609184708056,"results":"36","hashOfConfig":"25"},{"size":1120,"mtime":1609444435156,"results":"37","hashOfConfig":"25"},{"size":203,"mtime":1608844160393,"results":"38","hashOfConfig":"25"},{"size":2918,"mtime":1609440506515,"results":"39","hashOfConfig":"25"},{"size":694,"mtime":1609004402401,"results":"40","hashOfConfig":"25"},{"size":3604,"mtime":1609183013464,"results":"41","hashOfConfig":"25"},{"size":375,"mtime":1608841905339,"results":"42","hashOfConfig":"25"},{"size":4192,"mtime":1609444416357,"results":"43","hashOfConfig":"25"},{"size":7074,"mtime":1609443743549,"results":"44","hashOfConfig":"25"},{"size":116,"mtime":1609440566456,"results":"45","hashOfConfig":"25"},{"size":12898,"mtime":1609442585202,"results":"46","hashOfConfig":"25"},{"size":1721,"mtime":1609435551003,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"b6llbu",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\react-apps\\deck-checker\\src\\App.js",["101","102"],"import React from \"react\";\n\n// App\nimport Routes from \"./Routes\";\nimport { Login } from \"./views\";\n//import { auth } from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\n\n// Styles\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport \"./App.scss\";\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        light: \"#58a5f0\",\n        main: \"#0277bd\",\n        dark: \"#004c8c\",\n        contrastText: \"#ffffff\",\n      },\n      secondary: {\n        light: \"#5472d3\",\n        main: \"#0d47a1\",\n        dark: \"#002171\",\n        contrastText: \"#ffffff\",\n      },\n    },\n  });\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className=\"app\">\n        <Routes />\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","F:\\react-apps\\deck-checker\\src\\index.js",[],["103","104"],"F:\\react-apps\\deck-checker\\src\\views\\index.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Error\\Error.js",[],["105","106"],"F:\\react-apps\\deck-checker\\src\\views\\Home\\Home.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Login\\Login.js",[],"F:\\react-apps\\deck-checker\\src\\components\\index.js",[],"F:\\react-apps\\deck-checker\\src\\components\\VisualSearch\\VisualSearch.js",[],"F:\\react-apps\\deck-checker\\src\\components\\Search\\Search.js",[],"F:\\react-apps\\deck-checker\\src\\Reducer.js",[],["107","108"],"F:\\react-apps\\deck-checker\\src\\firebase.js",[],["109","110"],"F:\\react-apps\\deck-checker\\src\\components\\Header\\Header.js",[],"F:\\react-apps\\deck-checker\\src\\Routes.js",["111"],"F:\\react-apps\\deck-checker\\src\\views\\SearchPage\\SearchPage.js",[],"F:\\react-apps\\deck-checker\\src\\helpers.js",["112","113"],"F:\\react-apps\\deck-checker\\src\\components\\QR\\QR.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Profile\\Profile.js",[],["114","115"],"F:\\react-apps\\deck-checker\\src\\StateProvider.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\Deck.js",["116","117"],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\Search\\Search.js",["118"],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\index.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\List\\List.js",["119","120","121"],"import React, { useContext, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport firebase from \"firebase\";\r\n\r\nimport db from \"../../../../../firebase\";\r\nimport { DeckContext } from \"../../../Deck\";\r\nimport { useStateValue } from \"../../../../../StateProvider\";\r\n\r\nimport {\r\n  TextField,\r\n  Button,\r\n  makeStyles,\r\n  Modal,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\n// import { EditIcon } from \"@material-ui/icons/Edit\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport \"./List.scss\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction List() {\r\n  const [{ user }] = useStateValue();\r\n\r\n  const {\r\n    providerDeck: { deck, setDeck },\r\n    providerList: { list, setList },\r\n    providerCanEdit: { canEdit },\r\n    providerLoading: { loading },\r\n    providerIsNewDeck: { isNewDeck },\r\n  } = useContext(DeckContext);\r\n\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n\r\n  // const [editTitle, setEditTitle] = useState(false);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [deckName, setDeckName] = useState(deck.deck_name);\r\n  const [editTitle, setEditTitle] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  const addCard = (board, sectionKey, cardKey) => {\r\n    let updatedList = list;\r\n    updatedList[board][sectionKey].quantity++;\r\n    updatedList[board][sectionKey].cards[cardKey].quantity++;\r\n    updatedList[board][sectionKey].cards.sort((a, b) => {\r\n      if (a.name < b.name) {\r\n        return -1;\r\n      }\r\n      if (a.name > b.name) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n    setList(updatedList);\r\n    const updatedDeck = {\r\n      deck_name: deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: JSON.stringify(updatedList),\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n  };\r\n\r\n  const removeCard = (board, sectionKey, cardKey) => {\r\n    let updatedList = list;\r\n    updatedList[board][sectionKey].quantity--;\r\n    updatedList[board][sectionKey].cards[cardKey].quantity--;\r\n    if (updatedList[board][sectionKey].cards[cardKey].quantity === 0) {\r\n      updatedList[board][sectionKey].cards.splice(cardKey, 1);\r\n    }\r\n    if (updatedList[board][sectionKey].quantity === 0) {\r\n      updatedList[board].splice(sectionKey, 1);\r\n    }\r\n    setList(updatedList);\r\n    const updatedDeck = {\r\n      deck_name: deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: JSON.stringify(updatedList),\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n  };\r\n\r\n  const getSectionTitle = (key) => {\r\n    switch (key) {\r\n      case \"main\":\r\n        return \"Main Deck\";\r\n      case \"side\":\r\n        return \"Sideboard\";\r\n      default:\r\n        return key;\r\n    }\r\n  };\r\n\r\n  const [openSnackbar, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n  const [snackbarStatus, setSnackbarStatus] = useState(\"\");\r\n\r\n  const Alert = (props) => (\r\n    <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n  );\r\n\r\n  const handleSnackbarOpen = (status, message) => {\r\n    setSnackbarStatus(status);\r\n    setSnackbarMessage(message);\r\n    setSnackbarOpen(true);\r\n  };\r\n\r\n  const handleSnackbarClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const deleteDeckCheck = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const deleteDeck = () => {\r\n    db.collection(\"decks\")\r\n      .doc(deckId)\r\n      .delete()\r\n      .then(function () {\r\n        //console.log(\"Deck successfully deleted!\");\r\n        history.push(\"/\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error removing deck: \", error);\r\n      });\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .collection(\"decks\")\r\n      .doc(deckId)\r\n      .delete()\r\n      .then(function () {\r\n        //console.log(\"User deck successfully deleted!\");\r\n        history.push(\"/u/\" + user.uid);\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error removing user deck: \", error);\r\n      });\r\n    handleSnackbarOpen(\"success\", \"Deck deleted!\");\r\n  };\r\n\r\n  const saveDeck = () => {\r\n    setEditTitle(false);\r\n    const updatedDeck = {\r\n      deck_name: deckName ? deckName : deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: deck.list,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .collection(\"decks\")\r\n      .doc(deckId)\r\n      .update({\r\n        deck_name: deck.deck_name,\r\n        commander_name: deck.commander_name,\r\n        commander_id: deck.commander_id,\r\n        commander_image: deck.commander_image,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      });\r\n    db.collection(\"decks\").doc(deckId).update({\r\n      deck_name: deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      list: deck.list,\r\n    });\r\n    handleSnackbarOpen(\"success\", \"Deck saved!\");\r\n  };\r\n\r\n  const saveNewDeck = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!deck.commander_name || !deck.commander_id) {\r\n      handleSnackbarOpen(\"error\", \"No commander set.\");\r\n      return;\r\n    }\r\n\r\n    const data = {\r\n      deck_name: deckName ? deckName : deck.commander_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: user.uid,\r\n      list: deck.list,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n\r\n    db.collection(\"decks\")\r\n      .add(data)\r\n      .then((deck) => {\r\n        assignDeckToUser(deck, data);\r\n      });\r\n\r\n    handleSnackbarOpen(\"success\", \"Deck added!\");\r\n  };\r\n\r\n  const assignDeckToUser = (deck, data) => {\r\n    //console.log(deck, data);\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .collection(\"decks\")\r\n      .doc(deck.id)\r\n      .set({\r\n        deck_name: deckName ? deckName : data.commander_name,\r\n        commander_name: data.commander_name,\r\n        commander_id: data.commander_id,\r\n        commander_image: data.commander_image,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then(() => {\r\n        history.push(\"/d/\" + deck.id);\r\n      });\r\n  };\r\n\r\n  const modalBody = (\r\n    <div style={modalStyle} className={classes.paper + \" modal\"}>\r\n      <h2 className=\"modal__title\">Delete Deck</h2>\r\n      <p className=\"modal__description\">\r\n        Are you sure you want to delete this deck? This action cannot be undone.\r\n      </p>\r\n      <div className=\"modal__actions\">\r\n        <div className=\"modal__action modal__action--delete\">\r\n          <Button onClick={deleteDeck} variant=\"contained\" color=\"primary\">\r\n            Delete Deck\r\n          </Button>\r\n        </div>\r\n        <div className=\"modal__action\">\r\n          <Button onClick={handleModalClose} variant=\"contained\">\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {console.log(deck)}\r\n      <div className=\"deck__preview\">\r\n        <h2 className=\"deck__name\">\r\n          {deck.deck_name ? deck.deck_name : \"New Deck\"}\r\n        </h2>\r\n        <div className=\"deck__image\">\r\n          <img\r\n            className=\"decks__commander\"\r\n            src={deck.commander_image ? deck.commander_image : \"/card_back.jpg\"}\r\n            alt={deck.commander}\r\n            key={deck.commander}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"deck__decklist\">\r\n        {!loading ? (\r\n          <div className=\"decklist\">\r\n            <div className=\"decklist__main\">\r\n              {Object.keys(list).map((key) => (\r\n                <React.Fragment key={key}>\r\n                  {list[key].length ? (\r\n                    <div className=\"decklist__section decklist__section--title\">\r\n                      <h2 className=\"decklist__title\">\r\n                        {getSectionTitle(key)}\r\n                      </h2>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  {list[key].map((section, sectionKey) => (\r\n                    <div\r\n                      className=\"decklist__section\"\r\n                      key={section.type + section.quantity}\r\n                    >\r\n                      <h3 className=\"decklist__subtitle\">\r\n                        {section.type} ({section.quantity})\r\n                      </h3>\r\n                      <ul>\r\n                        {console.log(section.cards)}\r\n                        {section.cards.map((card, cardKey) => (\r\n                          <li className=\"decklist__item\" key={cardKey}>\r\n                            <span className=\"decklist__quantity\">\r\n                              {card.quantity}\r\n                            </span>{\" \"}\r\n                            {card.name}{\" \"}\r\n                            {canEdit ? (\r\n                              <>\r\n                                <AddCircleIcon\r\n                                  className=\"decklist__button decklist__button--add\"\r\n                                  onClick={() =>\r\n                                    addCard(key, sectionKey, cardKey)\r\n                                  }\r\n                                ></AddCircleIcon>\r\n                                <RemoveCircleIcon\r\n                                  className=\"decklist__button decklist__button--remove\"\r\n                                  onClick={() =>\r\n                                    removeCard(key, sectionKey, cardKey)\r\n                                  }\r\n                                ></RemoveCircleIcon>\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  ))}\r\n                </React.Fragment>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      {canEdit || isNewDeck ? (\r\n        <>\r\n          <div className=\"deck__actions deck__actions--bottom\">\r\n            <div className=\"deck__action\">\r\n              <Button\r\n                type=\"submit\"\r\n                onClick={isNewDeck ? saveNewDeck : saveDeck}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                {isNewDeck ? \"Save New Deck\" : \"Save Changes\"}\r\n              </Button>\r\n            </div>\r\n            {!isNewDeck ? (\r\n              <div className=\"deck__action deck__action--delete\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  onClick={deleteDeckCheck}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Delete Deck\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n          <Modal\r\n            open={modalOpen}\r\n            onClose={handleModalClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n          >\r\n            {modalBody}\r\n          </Modal>\r\n          <Snackbar\r\n            open={openSnackbar}\r\n            autoHideDuration={4000}\r\n            onClose={handleSnackbarClose}\r\n          >\r\n            <Alert onClose={handleSnackbarClose} severity={snackbarStatus}>\r\n              <>{snackbarMessage}</>\r\n            </Alert>\r\n          </Snackbar>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\DeckTabs.js",[],{"ruleId":"122","severity":1,"message":"123","line":5,"column":10,"nodeType":"124","messageId":"125","endLine":5,"endColumn":15},{"ruleId":"122","severity":1,"message":"126","line":7,"column":10,"nodeType":"124","messageId":"125","endLine":7,"endColumn":23},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"127","replacedBy":"133"},{"ruleId":"129","replacedBy":"134"},{"ruleId":"127","replacedBy":"135"},{"ruleId":"129","replacedBy":"136"},{"ruleId":"122","severity":1,"message":"137","line":10,"column":20,"nodeType":"124","messageId":"125","endLine":10,"endColumn":28},{"ruleId":"122","severity":1,"message":"138","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":16},{"ruleId":"122","severity":1,"message":"139","line":3,"column":8,"nodeType":"124","messageId":"125","endLine":3,"endColumn":10},{"ruleId":"127","replacedBy":"140"},{"ruleId":"129","replacedBy":"141"},{"ruleId":"122","severity":1,"message":"142","line":8,"column":18,"nodeType":"124","messageId":"125","endLine":8,"endColumn":26},{"ruleId":"122","severity":1,"message":"143","line":27,"column":9,"nodeType":"124","messageId":"125","endLine":27,"endColumn":16},{"ruleId":"122","severity":1,"message":"144","line":20,"column":10,"nodeType":"124","messageId":"125","endLine":20,"endColumn":18},{"ruleId":"122","severity":1,"message":"145","line":10,"column":3,"nodeType":"124","messageId":"125","endLine":10,"endColumn":12},{"ruleId":"122","severity":1,"message":"146","line":61,"column":20,"nodeType":"124","messageId":"125","endLine":61,"endColumn":31},{"ruleId":"122","severity":1,"message":"147","line":62,"column":10,"nodeType":"124","messageId":"125","endLine":62,"endColumn":19},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'useStateValue' is defined but never used.","no-native-reassign",["148"],"no-negated-in-lhs",["149"],["148"],["149"],["148"],["149"],["148"],["149"],"'dispatch' is assigned a value but never used.","'firebase' is defined but never used.","'db' is defined but never used.",["148"],["149"],"'SnackBar' is defined but never used.","'history' is assigned a value but never used.","'deckName' is assigned a value but never used.","'TextField' is defined but never used.","'setDeckName' is assigned a value but never used.","'editTitle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]