[{"F:\\react-apps\\deck-checker\\src\\App.js":"1","F:\\react-apps\\deck-checker\\src\\index.js":"2","F:\\react-apps\\deck-checker\\src\\views\\index.js":"3","F:\\react-apps\\deck-checker\\src\\views\\Error\\Error.js":"4","F:\\react-apps\\deck-checker\\src\\views\\Home\\Home.js":"5","F:\\react-apps\\deck-checker\\src\\views\\Login\\Login.js":"6","F:\\react-apps\\deck-checker\\src\\components\\index.js":"7","F:\\react-apps\\deck-checker\\src\\components\\VisualSearch\\VisualSearch.js":"8","F:\\react-apps\\deck-checker\\src\\components\\Search\\Search.js":"9","F:\\react-apps\\deck-checker\\src\\Reducer.js":"10","F:\\react-apps\\deck-checker\\src\\firebase.js":"11","F:\\react-apps\\deck-checker\\src\\components\\Header\\Header.js":"12","F:\\react-apps\\deck-checker\\src\\Routes.js":"13","F:\\react-apps\\deck-checker\\src\\views\\SearchPage\\SearchPage.js":"14","F:\\react-apps\\deck-checker\\src\\helpers.js":"15","F:\\react-apps\\deck-checker\\src\\components\\QR\\QR.js":"16","F:\\react-apps\\deck-checker\\src\\views\\Profile\\Profile.js":"17","F:\\react-apps\\deck-checker\\src\\StateProvider.js":"18","F:\\react-apps\\deck-checker\\src\\views\\Deck\\Deck.js":"19","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\Search\\Search.js":"20","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\index.js":"21","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\List\\List.js":"22","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\DeckTabs.js":"23","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\Logs\\Logs.js":"24"},{"size":812,"mtime":1609445107159,"results":"25","hashOfConfig":"26"},{"size":408,"mtime":1608841924200,"results":"27","hashOfConfig":"26"},{"size":307,"mtime":1609444451533,"results":"28","hashOfConfig":"26"},{"size":110,"mtime":1608995991233,"results":"29","hashOfConfig":"26"},{"size":3364,"mtime":1609198312985,"results":"30","hashOfConfig":"26"},{"size":1366,"mtime":1609453094058,"results":"31","hashOfConfig":"26"},{"size":139,"mtime":1609441309669,"results":"32","hashOfConfig":"26"},{"size":2702,"mtime":1608840664955,"results":"33","hashOfConfig":"26"},{"size":2754,"mtime":1609463061718,"results":"34","hashOfConfig":"26"},{"size":601,"mtime":1609160571834,"results":"35","hashOfConfig":"26"},{"size":609,"mtime":1608841579322,"results":"36","hashOfConfig":"26"},{"size":2915,"mtime":1609184708056,"results":"37","hashOfConfig":"26"},{"size":1110,"mtime":1609446150416,"results":"38","hashOfConfig":"26"},{"size":203,"mtime":1608844160393,"results":"39","hashOfConfig":"26"},{"size":4554,"mtime":1609464734435,"results":"40","hashOfConfig":"26"},{"size":694,"mtime":1609004402401,"results":"41","hashOfConfig":"26"},{"size":4747,"mtime":1609512513814,"results":"42","hashOfConfig":"26"},{"size":375,"mtime":1608841905339,"results":"43","hashOfConfig":"26"},{"size":5011,"mtime":1609510509557,"results":"44","hashOfConfig":"26"},{"size":10622,"mtime":1609505555147,"results":"45","hashOfConfig":"26"},{"size":116,"mtime":1609440566456,"results":"46","hashOfConfig":"26"},{"size":19174,"mtime":1609511008306,"results":"47","hashOfConfig":"26"},{"size":1769,"mtime":1609510966240,"results":"48","hashOfConfig":"26"},{"size":1807,"mtime":1609510860518,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"b6llbu",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\react-apps\\deck-checker\\src\\App.js",[],"F:\\react-apps\\deck-checker\\src\\index.js",[],["107","108"],"F:\\react-apps\\deck-checker\\src\\views\\index.js",[],["109","110"],"F:\\react-apps\\deck-checker\\src\\views\\Error\\Error.js",[],["111","112"],"F:\\react-apps\\deck-checker\\src\\views\\Home\\Home.js",[],["113","114"],"F:\\react-apps\\deck-checker\\src\\views\\Login\\Login.js",[],"F:\\react-apps\\deck-checker\\src\\components\\index.js",[],["115","116"],"F:\\react-apps\\deck-checker\\src\\components\\VisualSearch\\VisualSearch.js",[],"F:\\react-apps\\deck-checker\\src\\components\\Search\\Search.js",[],"F:\\react-apps\\deck-checker\\src\\Reducer.js",[],["117","118"],"F:\\react-apps\\deck-checker\\src\\firebase.js",[],"F:\\react-apps\\deck-checker\\src\\components\\Header\\Header.js",[],["119","120"],"F:\\react-apps\\deck-checker\\src\\Routes.js",[],"F:\\react-apps\\deck-checker\\src\\views\\SearchPage\\SearchPage.js",[],"F:\\react-apps\\deck-checker\\src\\helpers.js",[],"F:\\react-apps\\deck-checker\\src\\components\\QR\\QR.js",[],["121","122"],"F:\\react-apps\\deck-checker\\src\\views\\Profile\\Profile.js",[],"F:\\react-apps\\deck-checker\\src\\StateProvider.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\Deck.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\Search\\Search.js",["123"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nimport { DeckContext } from \"../../Deck\";\r\nimport { addCardToDeck } from \"../../../../helpers\";\r\n\r\nimport { Card, TextField, Button } from \"@material-ui/core\";\r\n\r\nfunction Search(props) {\r\n  const {\r\n    providerDeck: { deck, setDeck },\r\n    providerList: { list, setList },\r\n    providerCanEdit: { canEdit },\r\n    providerIsNewDeck: { isNewDeck },\r\n    providerLoading: { setLoading },\r\n    providerLoadingMessage: { setLoadingMessage },\r\n  } = useContext(DeckContext);\r\n\r\n  const [cardList, setCardList] = useState([]);\r\n  const [searching, setSearching] = useState(false);\r\n  const [addCard, setAddCard] = useState(\"\");\r\n  const [importCards, setImportCards] = useState();\r\n  // eslint-disable-next-line\r\n  const [deckName, setDeckName] = useState(\"\");\r\n\r\n  const handleFormOnChange = (e) => {\r\n    const target = e.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    switch (name) {\r\n      case \"deckName\":\r\n        setDeckName(value);\r\n        break;\r\n      case \"addCard\":\r\n        setAddCard(value);\r\n        break;\r\n      case \"importCards\":\r\n        setImportCards(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const searchUrl = \"https://api.scryfall.com/cards/search?q=\";\r\n  const searchCards = (search) => {\r\n    fetch(searchUrl + search)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"404\");\r\n        } else {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        setCardList(data.data);\r\n        setSearching(false);\r\n      })\r\n      .catch((error) => {\r\n        setSearching(false);\r\n      });\r\n  };\r\n\r\n  const addNewCommander = (item, quantity = 1, board = \"main\", limit = 1) => {\r\n    let updatedDeck;\r\n    if (item.layout === \"transform\") {\r\n      updatedDeck = {\r\n        commander_type: \"transform\",\r\n        deck_name: deck.deck_name,\r\n        commander_name: item.name,\r\n        commander_id: item.id,\r\n        commander_image: item.card_faces[0].image_uris.normal,\r\n        commander_image_2: item.card_faces[1].image_uris.normal,\r\n        user_id: deck.user_id,\r\n        list: JSON.stringify(list),\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      };\r\n    } else {\r\n      updatedDeck = {\r\n        commander_type: \"normal\",\r\n        deck_name: deck.deck_name,\r\n        commander_name: item.name,\r\n        commander_id: item.id,\r\n        commander_image: item.image_uris.normal,\r\n        user_id: deck.user_id,\r\n        list: JSON.stringify(list),\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      };\r\n    }\r\n    setDeck(updatedDeck);\r\n  };\r\n\r\n  const addNewCard = (item, quantity = 1, board = \"main\", limit = null) => {\r\n    const updatedList = addCardToDeck(list, item, quantity, board, limit);\r\n    setList(updatedList);\r\n    const updatedDeck = {\r\n      deck_name: deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: JSON.stringify(updatedList),\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setAddCard(\"\");\r\n    setCardList([]);\r\n  };\r\n\r\n  const importCard = (cardName, quantity, board = \"main\") => {\r\n    const url = \"https://api.scryfall.com/cards/named?fuzzy=\";\r\n    fetch(url + cardName)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"404\");\r\n        } else {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        addNewCard(data, quantity, board);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const throttledProcess = (items, numberOfCards, interval) => {\r\n    if (items.length === 0) {\r\n      setLoadingMessage(\"\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    setLoadingMessage(\r\n      \"Importing card list ... \" +\r\n        (items.length - numberOfCards) * -1 +\r\n        \" of \" +\r\n        numberOfCards\r\n    );\r\n\r\n    importCard(items[0].name, items[0].quantity, items[0].board);\r\n\r\n    setTimeout(\r\n      () => throttledProcess(items.slice(1), numberOfCards, interval), // wrap in an arrow function to defer evaluation\r\n      interval\r\n    );\r\n  };\r\n\r\n  const runImport = () => {\r\n    setLoadingMessage(\"Importing card list ... \");\r\n    setLoading(true);\r\n    let board = \"main\";\r\n    let importList = [];\r\n    importCards\r\n      .replace(/\\r\\n/g, \"\\n\")\r\n      .split(\"\\n\")\r\n      .map((line) => {\r\n        const lineItem = line.trim();\r\n        console.log(lineItem);\r\n        if (lineItem === \"\" || lineItem.toLowerCase() === \"sideboard\") {\r\n          board = \"side\";\r\n          return true;\r\n        }\r\n        const lineItemSplit = lineItem.match(/^(\\S+)\\s(.*)/);\r\n        if (!lineItemSplit) {\r\n          return true;\r\n        }\r\n        const lineItemArray = lineItemSplit.slice(1);\r\n        if (lineItemArray.length !== 2) {\r\n          return true;\r\n        }\r\n        const quantity = parseInt(lineItemArray[0]);\r\n        if (isNaN(quantity)) {\r\n          return true;\r\n        }\r\n        const name = lineItemArray[1];\r\n        importList.push({ quantity: quantity, name: name, board: board });\r\n        return true;\r\n      });\r\n    // console.log(importList);\r\n\r\n    const numberOfCards = importList.length;\r\n\r\n    if (!numberOfCards) {\r\n      return;\r\n    }\r\n\r\n    setLoadingMessage(\"Importing card list ... 0 of \" + numberOfCards);\r\n\r\n    throttledProcess(importList, numberOfCards, 200);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      if (addCard.length > 2) {\r\n        setSearching(true);\r\n        searchCards(addCard);\r\n      }\r\n    }, 1000);\r\n    return () => clearTimeout(timeoutId);\r\n  }, [addCard]);\r\n\r\n  return (\r\n    <>\r\n      {canEdit || isNewDeck ? (\r\n        <>\r\n          <div className=\"section__card section__card--search\">\r\n            {/* <Card className=\"deck__card\"> */}\r\n            <section className=\"deck__actions deck__actions--top\">\r\n              <div className=\"deck__action deck__action--info\">\r\n                <h3 className=\"deck__action-title\">\r\n                  Add card(s) using search:\r\n                </h3>\r\n              </div>\r\n              <div className=\"deck__action deck__action--search\">\r\n                <TextField\r\n                  label=\"Search\"\r\n                  variant=\"outlined\"\r\n                  name=\"addCard\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search Cards ...\"\r\n                  value={addCard}\r\n                  onChange={handleFormOnChange}\r\n                />\r\n                <div className=\"deck__clear-button\">\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={clearSearch}\r\n                  >\r\n                    Clear Search\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              {searching ? (\r\n                <div className=\"deck__search-list\">Searching ...</div>\r\n              ) : addCard.length > 2 && cardList.length > 0 ? (\r\n                <ul className=\"deck__search-list\">\r\n                  {cardList\r\n                    .filter((item, i) => {\r\n                      if (!addCard) return true;\r\n                      if (\r\n                        item.name.toLowerCase().includes(addCard.toLowerCase())\r\n                      ) {\r\n                        return true;\r\n                      }\r\n                      return false;\r\n                    })\r\n                    .slice(0, 100)\r\n                    .map((item, i) => (\r\n                      <li className=\"deck__search-item\" key={i}>\r\n                        <span>\r\n                          <div className=\"deck__search-name\">{item.name}</div>\r\n                          <div className=\"deck__search-buttons\">\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              onClick={() => {\r\n                                addNewCard(item);\r\n                              }}\r\n                            >\r\n                              Add to Main\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              onClick={() => {\r\n                                addNewCard(item, 1, \"side\");\r\n                              }}\r\n                            >\r\n                              Add to Side\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              onClick={() => {\r\n                                addNewCommander(item);\r\n                              }}\r\n                            >\r\n                              Set Deck Image\r\n                            </Button>\r\n                          </div>\r\n                        </span>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              ) : cardList.length ? (\r\n                <div className=\"search__list\"></div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </section>\r\n            {/* </Card> */}\r\n          </div>\r\n          <div className=\"section__card section__card--import\">\r\n            {/* <Card className=\"deck__card\"> */}\r\n            <section className=\"deck__actions deck__actions--top\">\r\n              <div className=\"deck__action deck__action--info\">\r\n                <h3 className=\"deck__action-title\">Add card(s) from list:</h3>\r\n              </div>\r\n              <div className=\"deck__action deck__action--search\">\r\n                <TextField\r\n                  label=\"Import cards from list\"\r\n                  variant=\"outlined\"\r\n                  name=\"importCards\"\r\n                  multiline\r\n                  value={importCards}\r\n                  onChange={handleFormOnChange}\r\n                />\r\n              </div>\r\n              <div className=\"deck__import\">\r\n                <Button variant=\"contained\" color=\"primary\" onClick={runImport}>\r\n                  Import\r\n                </Button>\r\n              </div>\r\n            </section>\r\n            {/* </Card> */}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\index.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\List\\List.js",["124","125","126","127"],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\DeckTabs.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\Logs\\Logs.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"132"},{"ruleId":"130","replacedBy":"133"},{"ruleId":"128","replacedBy":"134"},{"ruleId":"130","replacedBy":"135"},{"ruleId":"128","replacedBy":"136"},{"ruleId":"130","replacedBy":"137"},{"ruleId":"128","replacedBy":"138"},{"ruleId":"130","replacedBy":"139"},{"ruleId":"128","replacedBy":"140"},{"ruleId":"130","replacedBy":"141"},{"ruleId":"128","replacedBy":"142"},{"ruleId":"130","replacedBy":"143"},{"ruleId":"128","replacedBy":"144"},{"ruleId":"130","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":7,"column":10,"nodeType":"148","messageId":"149","endLine":7,"endColumn":14},{"ruleId":"146","severity":1,"message":"150","line":55,"column":26,"nodeType":"148","messageId":"149","endLine":55,"endColumn":35},{"ruleId":"146","severity":1,"message":"151","line":55,"column":37,"nodeType":"148","messageId":"149","endLine":55,"endColumn":49},{"ruleId":"146","severity":1,"message":"152","line":56,"column":20,"nodeType":"148","messageId":"149","endLine":56,"endColumn":23},{"ruleId":"146","severity":1,"message":"153","line":56,"column":25,"nodeType":"148","messageId":"149","endLine":56,"endColumn":31},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],["154"],["155"],["154"],["155"],["154"],["155"],["154"],["155"],["154"],["155"],["154"],["155"],["154"],["155"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'updateLog' is assigned a value but never used.","'setUpdateLog' is assigned a value but never used.","'log' is assigned a value but never used.","'setLog' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]