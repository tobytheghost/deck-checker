[{"F:\\react-apps\\deck-checker\\src\\App.js":"1","F:\\react-apps\\deck-checker\\src\\index.js":"2","F:\\react-apps\\deck-checker\\src\\views\\index.js":"3","F:\\react-apps\\deck-checker\\src\\views\\Error\\Error.js":"4","F:\\react-apps\\deck-checker\\src\\views\\Home\\Home.js":"5","F:\\react-apps\\deck-checker\\src\\views\\Login\\Login.js":"6","F:\\react-apps\\deck-checker\\src\\components\\index.js":"7","F:\\react-apps\\deck-checker\\src\\components\\VisualSearch\\VisualSearch.js":"8","F:\\react-apps\\deck-checker\\src\\components\\Search\\Search.js":"9","F:\\react-apps\\deck-checker\\src\\Reducer.js":"10","F:\\react-apps\\deck-checker\\src\\firebase.js":"11","F:\\react-apps\\deck-checker\\src\\components\\Header\\Header.js":"12","F:\\react-apps\\deck-checker\\src\\Routes.js":"13","F:\\react-apps\\deck-checker\\src\\views\\SearchPage\\SearchPage.js":"14","F:\\react-apps\\deck-checker\\src\\helpers.js":"15","F:\\react-apps\\deck-checker\\src\\components\\QR\\QR.js":"16","F:\\react-apps\\deck-checker\\src\\views\\Profile\\Profile.js":"17","F:\\react-apps\\deck-checker\\src\\StateProvider.js":"18","F:\\react-apps\\deck-checker\\src\\views\\Deck\\Deck.js":"19","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\Search\\Search.js":"20","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\index.js":"21","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\List\\List.js":"22","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\DeckTabs.js":"23","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\Logs\\Logs.js":"24"},{"size":812,"mtime":1609445107159,"results":"25","hashOfConfig":"26"},{"size":408,"mtime":1608841924200,"results":"27","hashOfConfig":"26"},{"size":307,"mtime":1609444451533,"results":"28","hashOfConfig":"26"},{"size":110,"mtime":1608995991233,"results":"29","hashOfConfig":"26"},{"size":3364,"mtime":1609198312985,"results":"30","hashOfConfig":"26"},{"size":1366,"mtime":1609453094058,"results":"31","hashOfConfig":"26"},{"size":139,"mtime":1609441309669,"results":"32","hashOfConfig":"26"},{"size":2702,"mtime":1608840664955,"results":"33","hashOfConfig":"26"},{"size":2754,"mtime":1609463061718,"results":"34","hashOfConfig":"26"},{"size":601,"mtime":1609160571834,"results":"35","hashOfConfig":"26"},{"size":609,"mtime":1608841579322,"results":"36","hashOfConfig":"26"},{"size":2915,"mtime":1609184708056,"results":"37","hashOfConfig":"26"},{"size":1110,"mtime":1609446150416,"results":"38","hashOfConfig":"26"},{"size":203,"mtime":1608844160393,"results":"39","hashOfConfig":"26"},{"size":4554,"mtime":1609464734435,"results":"40","hashOfConfig":"26"},{"size":694,"mtime":1609004402401,"results":"41","hashOfConfig":"26"},{"size":4747,"mtime":1609512513814,"results":"42","hashOfConfig":"26"},{"size":375,"mtime":1608841905339,"results":"43","hashOfConfig":"26"},{"size":5011,"mtime":1609510509557,"results":"44","hashOfConfig":"26"},{"size":10622,"mtime":1609505555147,"results":"45","hashOfConfig":"26"},{"size":116,"mtime":1609440566456,"results":"46","hashOfConfig":"26"},{"size":19174,"mtime":1609511008306,"results":"47","hashOfConfig":"26"},{"size":1769,"mtime":1609510966240,"results":"48","hashOfConfig":"26"},{"size":1807,"mtime":1609510860518,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"b6llbu",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\react-apps\\deck-checker\\src\\App.js",[],["109","110"],"F:\\react-apps\\deck-checker\\src\\index.js",[],["111","112"],"F:\\react-apps\\deck-checker\\src\\views\\index.js",[],["113","114"],"F:\\react-apps\\deck-checker\\src\\views\\Error\\Error.js",[],["115","116"],"F:\\react-apps\\deck-checker\\src\\views\\Home\\Home.js",[],["117","118"],"F:\\react-apps\\deck-checker\\src\\views\\Login\\Login.js",[],"F:\\react-apps\\deck-checker\\src\\components\\index.js",[],["119","120"],"F:\\react-apps\\deck-checker\\src\\components\\VisualSearch\\VisualSearch.js",[],"F:\\react-apps\\deck-checker\\src\\components\\Search\\Search.js",[],"F:\\react-apps\\deck-checker\\src\\Reducer.js",[],["121","122"],"F:\\react-apps\\deck-checker\\src\\firebase.js",[],"F:\\react-apps\\deck-checker\\src\\components\\Header\\Header.js",[],["123","124"],"F:\\react-apps\\deck-checker\\src\\Routes.js",[],"F:\\react-apps\\deck-checker\\src\\views\\SearchPage\\SearchPage.js",[],"F:\\react-apps\\deck-checker\\src\\helpers.js",[],"F:\\react-apps\\deck-checker\\src\\components\\QR\\QR.js",[],["125","126"],"F:\\react-apps\\deck-checker\\src\\views\\Profile\\Profile.js",[],"F:\\react-apps\\deck-checker\\src\\StateProvider.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\Deck.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\Search\\Search.js",["127"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nimport { DeckContext } from \"../../Deck\";\r\nimport { addCardToDeck } from \"../../../../helpers\";\r\n\r\nimport { Card, TextField, Button } from \"@material-ui/core\";\r\n\r\nfunction Search(props) {\r\n  const {\r\n    providerDeck: { deck, setDeck },\r\n    providerList: { list, setList },\r\n    providerCanEdit: { canEdit },\r\n    providerIsNewDeck: { isNewDeck },\r\n    providerLoading: { setLoading },\r\n    providerLoadingMessage: { setLoadingMessage },\r\n  } = useContext(DeckContext);\r\n\r\n  const [cardList, setCardList] = useState([]);\r\n  const [searching, setSearching] = useState(false);\r\n  const [addCard, setAddCard] = useState(\"\");\r\n  const [importCards, setImportCards] = useState();\r\n  // eslint-disable-next-line\r\n  const [deckName, setDeckName] = useState(\"\");\r\n\r\n  const handleFormOnChange = (e) => {\r\n    const target = e.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    switch (name) {\r\n      case \"deckName\":\r\n        setDeckName(value);\r\n        break;\r\n      case \"addCard\":\r\n        setAddCard(value);\r\n        break;\r\n      case \"importCards\":\r\n        setImportCards(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const searchUrl = \"https://api.scryfall.com/cards/search?q=\";\r\n  const searchCards = (search) => {\r\n    fetch(searchUrl + search)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"404\");\r\n        } else {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        setCardList(data.data);\r\n        setSearching(false);\r\n      })\r\n      .catch((error) => {\r\n        setSearching(false);\r\n      });\r\n  };\r\n\r\n  const addNewCommander = (item, quantity = 1, board = \"main\", limit = 1) => {\r\n    let updatedDeck;\r\n    if (item.layout === \"transform\") {\r\n      updatedDeck = {\r\n        commander_type: \"transform\",\r\n        deck_name: deck.deck_name,\r\n        commander_name: item.name,\r\n        commander_id: item.id,\r\n        commander_image: item.card_faces[0].image_uris.normal,\r\n        commander_image_2: item.card_faces[1].image_uris.normal,\r\n        user_id: deck.user_id,\r\n        list: JSON.stringify(list),\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      };\r\n    } else {\r\n      updatedDeck = {\r\n        commander_type: \"normal\",\r\n        deck_name: deck.deck_name,\r\n        commander_name: item.name,\r\n        commander_id: item.id,\r\n        commander_image: item.image_uris.normal,\r\n        user_id: deck.user_id,\r\n        list: JSON.stringify(list),\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      };\r\n    }\r\n    setDeck(updatedDeck);\r\n  };\r\n\r\n  const addNewCard = (item, quantity = 1, board = \"main\", limit = null) => {\r\n    const updatedList = addCardToDeck(list, item, quantity, board, limit);\r\n    setList(updatedList);\r\n    const updatedDeck = {\r\n      deck_name: deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: JSON.stringify(updatedList),\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setAddCard(\"\");\r\n    setCardList([]);\r\n  };\r\n\r\n  const importCard = (cardName, quantity, board = \"main\") => {\r\n    const url = \"https://api.scryfall.com/cards/named?fuzzy=\";\r\n    fetch(url + cardName)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"404\");\r\n        } else {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        addNewCard(data, quantity, board);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const throttledProcess = (items, numberOfCards, interval) => {\r\n    if (items.length === 0) {\r\n      setLoadingMessage(\"\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    setLoadingMessage(\r\n      \"Importing card list ... \" +\r\n        (items.length - numberOfCards) * -1 +\r\n        \" of \" +\r\n        numberOfCards\r\n    );\r\n\r\n    importCard(items[0].name, items[0].quantity, items[0].board);\r\n\r\n    setTimeout(\r\n      () => throttledProcess(items.slice(1), numberOfCards, interval), // wrap in an arrow function to defer evaluation\r\n      interval\r\n    );\r\n  };\r\n\r\n  const runImport = () => {\r\n    setLoadingMessage(\"Importing card list ... \");\r\n    setLoading(true);\r\n    let board = \"main\";\r\n    let importList = [];\r\n    importCards\r\n      .replace(/\\r\\n/g, \"\\n\")\r\n      .split(\"\\n\")\r\n      .map((line) => {\r\n        const lineItem = line.trim();\r\n        console.log(lineItem);\r\n        if (lineItem === \"\" || lineItem.toLowerCase() === \"sideboard\") {\r\n          board = \"side\";\r\n          return true;\r\n        }\r\n        const lineItemSplit = lineItem.match(/^(\\S+)\\s(.*)/);\r\n        if (!lineItemSplit) {\r\n          return true;\r\n        }\r\n        const lineItemArray = lineItemSplit.slice(1);\r\n        if (lineItemArray.length !== 2) {\r\n          return true;\r\n        }\r\n        const quantity = parseInt(lineItemArray[0]);\r\n        if (isNaN(quantity)) {\r\n          return true;\r\n        }\r\n        const name = lineItemArray[1];\r\n        importList.push({ quantity: quantity, name: name, board: board });\r\n        return true;\r\n      });\r\n    // console.log(importList);\r\n\r\n    const numberOfCards = importList.length;\r\n\r\n    if (!numberOfCards) {\r\n      return;\r\n    }\r\n\r\n    setLoadingMessage(\"Importing card list ... 0 of \" + numberOfCards);\r\n\r\n    throttledProcess(importList, numberOfCards, 200);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      if (addCard.length > 2) {\r\n        setSearching(true);\r\n        searchCards(addCard);\r\n      }\r\n    }, 1000);\r\n    return () => clearTimeout(timeoutId);\r\n  }, [addCard]);\r\n\r\n  return (\r\n    <>\r\n      {canEdit || isNewDeck ? (\r\n        <>\r\n          <div className=\"section__card section__card--search\">\r\n            {/* <Card className=\"deck__card\"> */}\r\n            <section className=\"deck__actions deck__actions--top\">\r\n              <div className=\"deck__action deck__action--info\">\r\n                <h3 className=\"deck__action-title\">\r\n                  Add card(s) using search:\r\n                </h3>\r\n              </div>\r\n              <div className=\"deck__action deck__action--search\">\r\n                <TextField\r\n                  label=\"Search\"\r\n                  variant=\"outlined\"\r\n                  name=\"addCard\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search Cards ...\"\r\n                  value={addCard}\r\n                  onChange={handleFormOnChange}\r\n                />\r\n                <div className=\"deck__clear-button\">\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={clearSearch}\r\n                  >\r\n                    Clear Search\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              {searching ? (\r\n                <div className=\"deck__search-list\">Searching ...</div>\r\n              ) : addCard.length > 2 && cardList.length > 0 ? (\r\n                <ul className=\"deck__search-list\">\r\n                  {cardList\r\n                    .filter((item, i) => {\r\n                      if (!addCard) return true;\r\n                      if (\r\n                        item.name.toLowerCase().includes(addCard.toLowerCase())\r\n                      ) {\r\n                        return true;\r\n                      }\r\n                      return false;\r\n                    })\r\n                    .slice(0, 100)\r\n                    .map((item, i) => (\r\n                      <li className=\"deck__search-item\" key={i}>\r\n                        <span>\r\n                          <div className=\"deck__search-name\">{item.name}</div>\r\n                          <div className=\"deck__search-buttons\">\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              onClick={() => {\r\n                                addNewCard(item);\r\n                              }}\r\n                            >\r\n                              Add to Main\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              onClick={() => {\r\n                                addNewCard(item, 1, \"side\");\r\n                              }}\r\n                            >\r\n                              Add to Side\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              onClick={() => {\r\n                                addNewCommander(item);\r\n                              }}\r\n                            >\r\n                              Set Deck Image\r\n                            </Button>\r\n                          </div>\r\n                        </span>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              ) : cardList.length ? (\r\n                <div className=\"search__list\"></div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </section>\r\n            {/* </Card> */}\r\n          </div>\r\n          <div className=\"section__card section__card--import\">\r\n            {/* <Card className=\"deck__card\"> */}\r\n            <section className=\"deck__actions deck__actions--top\">\r\n              <div className=\"deck__action deck__action--info\">\r\n                <h3 className=\"deck__action-title\">Add card(s) from list:</h3>\r\n              </div>\r\n              <div className=\"deck__action deck__action--search\">\r\n                <TextField\r\n                  label=\"Import cards from list\"\r\n                  variant=\"outlined\"\r\n                  name=\"importCards\"\r\n                  multiline\r\n                  value={importCards}\r\n                  onChange={handleFormOnChange}\r\n                />\r\n              </div>\r\n              <div className=\"deck__import\">\r\n                <Button variant=\"contained\" color=\"primary\" onClick={runImport}>\r\n                  Import\r\n                </Button>\r\n              </div>\r\n            </section>\r\n            {/* </Card> */}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\index.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\List\\List.js",["128","129","130","131"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport firebase from \"firebase\";\r\n\r\nimport db from \"../../../../../firebase\";\r\nimport { DeckContext } from \"../../../Deck\";\r\nimport { useStateValue } from \"../../../../../StateProvider\";\r\nimport { parseTextForSymbols } from \"../../../../../helpers\";\r\nimport Search from \"../../Search/Search\";\r\n\r\nimport {\r\n  TextField,\r\n  Button,\r\n  makeStyles,\r\n  Modal,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { Mana } from \"@saeris/react-mana\";\r\nimport \"./List.scss\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction List() {\r\n  const [{ user }] = useStateValue();\r\n\r\n  const {\r\n    providerDeck: { deck, setDeck },\r\n    providerList: { list, setList },\r\n    providerCanEdit: { canEdit },\r\n    providerLoading: { loading },\r\n    providerIsNewDeck: { isNewDeck },\r\n    providerUpdateLog: { updateLog, setUpdateLog },\r\n    providerLog: { log, setLog },\r\n  } = useContext(DeckContext);\r\n\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [deckName, setDeckName] = useState(deck.deck_name);\r\n  const [editTitle, setEditTitle] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState(\"\");\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (isNewDeck) {\r\n      setEditTitle(true);\r\n    }\r\n  }, [isNewDeck]);\r\n\r\n  const handleDeckNameChange = (e) => {\r\n    setDeckName(e.target.value);\r\n  };\r\n\r\n  const addCard = (item, board, sectionKey, cardKey) => {\r\n    let updatedList = list;\r\n    updatedList[board + \"_quantity\"]++;\r\n    updatedList[board][sectionKey].quantity++;\r\n    updatedList[board][sectionKey].cards[cardKey].quantity++;\r\n    updatedList[board][sectionKey].cards\r\n      .sort((a, b) => {\r\n        if (a.name < b.name) {\r\n          return -1;\r\n        }\r\n        if (a.name > b.name) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      })\r\n      .sort((a, b) => {\r\n        if (a.cmc < b.cmc) {\r\n          return -1;\r\n        }\r\n        if (a.cmc > b.cmc) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    setList(updatedList);\r\n    const updatedDeck = {\r\n      deck_name: deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: JSON.stringify(updatedList),\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n\r\n    // let newLog = updateLog;\r\n    // let checkExisting = false;\r\n\r\n    // for (let i = 0; i < newLog.length; i++) {\r\n    //   if (newLog[i].name === item.name) {\r\n    //     checkExisting = true;\r\n    //     newLog[i].quantity++;\r\n    //   }\r\n    // }\r\n\r\n    // if (!checkExisting) {\r\n    //   newLog.push({\r\n    //     name: item.name,\r\n    //     quantity: 1,\r\n    //   });\r\n    // }\r\n\r\n    // setUpdateLog(newLog);\r\n\r\n    // console.log(updateLog);\r\n  };\r\n\r\n  const removeCard = (item, board, sectionKey, cardKey) => {\r\n    let updatedList = list;\r\n    updatedList[board + \"_quantity\"]--;\r\n    if (updatedList[board + \"_quantity\"] < 0) {\r\n      updatedList[board + \"_quantity\"] = 0;\r\n    }\r\n    updatedList[board][sectionKey].quantity--;\r\n    if (updatedList[board][sectionKey].quantity < 0) {\r\n      updatedList[board][sectionKey].quantity = 0;\r\n    }\r\n    updatedList[board][sectionKey].cards[cardKey].quantity--;\r\n    if (updatedList[board][sectionKey].cards[cardKey].quantity < 0) {\r\n      updatedList[board][sectionKey].cards[cardKey].quantity = 0;\r\n    }\r\n    if (updatedList[board][sectionKey].cards[cardKey].quantity === 0) {\r\n      updatedList[board][sectionKey].cards.splice(cardKey, 1);\r\n    }\r\n    if (updatedList[board][sectionKey].quantity === 0) {\r\n      updatedList[board].splice(sectionKey, 1);\r\n    }\r\n    setList(updatedList);\r\n    const updatedDeck = {\r\n      deck_name: deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: JSON.stringify(updatedList),\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n\r\n    // let newLog = updateLog;\r\n    // let checkExisting = false;\r\n\r\n    // for (let i = 0; i < newLog.length; i++) {\r\n    //   if (newLog[i].name === item.name) {\r\n    //     checkExisting = true;\r\n    //     newLog[i].quantity--;\r\n    //   }\r\n    // }\r\n\r\n    // if (!checkExisting) {\r\n    //   newLog.push({\r\n    //     name: item.name,\r\n    //     quantity: -1,\r\n    //   });\r\n    // }\r\n\r\n    // setUpdateLog(newLog);\r\n\r\n    // console.log(updateLog);\r\n  };\r\n\r\n  const getSectionTitle = (key) => {\r\n    switch (key) {\r\n      case \"main\":\r\n        return \"Main Deck\";\r\n      case \"side\":\r\n        return \"Sideboard\";\r\n      default:\r\n        return key;\r\n    }\r\n  };\r\n\r\n  const [openSnackbar, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n  const [snackbarStatus, setSnackbarStatus] = useState(\"\");\r\n\r\n  const Alert = (props) => (\r\n    <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n  );\r\n\r\n  const handleSnackbarOpen = (status, message) => {\r\n    setSnackbarStatus(status);\r\n    setSnackbarMessage(message);\r\n    setSnackbarOpen(true);\r\n  };\r\n\r\n  const handleSnackbarClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const deleteDeckCheck = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const deleteDeck = () => {\r\n    db.collection(\"decks\")\r\n      .doc(deckId)\r\n      .delete()\r\n      .then(function () {\r\n        //console.log(\"Deck successfully deleted!\");\r\n        history.push(\"/\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error removing deck: \", error);\r\n      });\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .collection(\"decks\")\r\n      .doc(deckId)\r\n      .delete()\r\n      .then(function () {\r\n        //console.log(\"User deck successfully deleted!\");\r\n        history.push(\"/u/\" + user.uid);\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error removing user deck: \", error);\r\n      });\r\n    handleSnackbarOpen(\"success\", \"Deck deleted!\");\r\n  };\r\n\r\n  const saveDeck = () => {\r\n    setEditTitle(false);\r\n    const updatedDeck = {\r\n      deck_name: deckName ? deckName : deck.deck_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: deck.user_id,\r\n      list: deck.list,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    setDeck(updatedDeck);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .collection(\"decks\")\r\n      .doc(deckId)\r\n      .update({\r\n        deck_name: deckName ? deckName : deck.deck_name,\r\n        commander_name: deck.commander_name,\r\n        commander_id: deck.commander_id,\r\n        commander_image: deck.commander_image,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      });\r\n    db.collection(\"decks\")\r\n      .doc(deckId)\r\n      .update({\r\n        deck_name: deckName ? deckName : deck.deck_name,\r\n        commander_name: deck.commander_name,\r\n        commander_id: deck.commander_id,\r\n        commander_image: deck.commander_image,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        list: deck.list,\r\n      });\r\n    // console.log(updateLog);\r\n    // const updateLogDB = async () => {\r\n    //   const docRef = db.collection(\"deckLogs\").doc(deckId);\r\n    //   const doc = await docRef.get();\r\n    //   if (doc.exists) {\r\n    //     docRef.onSnapshot((snapshot) => {\r\n    //       const deckLog = snapshot.data();\r\n    //       if (deckLog) {\r\n    //         setLog(deckLog);\r\n    //       }\r\n    //       console.log(deckLog);\r\n    //     });\r\n    //     if (updateLog.length) {\r\n    //       console.log(log.log);\r\n    //       let addLog = JSON.parse(log.log);\r\n    //       addLog.push({\r\n    //         timestamp: new Date(),\r\n    //         log: JSON.stringify(updateLog),\r\n    //       });\r\n    //       db.collection(\"deckLogs\")\r\n    //         .doc(deckId)\r\n    //         .update({\r\n    //           log: JSON.stringify(addLog),\r\n    //         });\r\n    //     }\r\n    //   } else {\r\n    //     db.collection(\"deckLogs\").doc(deckId).set({\r\n    //       timestamp: new Date(),\r\n    //       log: [],\r\n    //     });\r\n    //   }\r\n    //   setUpdateLog([]);\r\n    //   setLog({});\r\n    // };\r\n    // updateLogDB();\r\n    handleSnackbarOpen(\"success\", \"Deck saved!\");\r\n  };\r\n\r\n  const saveNewDeck = () => {\r\n    // if (!deck.commander_name || !deck.commander_id) {\r\n    //   handleSnackbarOpen(\"error\", \"No deck image set.\");\r\n    //   return;\r\n    // }\r\n\r\n    if (deckName === \"\" && deck.commander_name === \"\") {\r\n      setDeckName(\"New Deck\");\r\n    }\r\n    const data = {\r\n      deck_name: deckName ? deckName : deck.commander_name,\r\n      commander_name: deck.commander_name,\r\n      commander_id: deck.commander_id,\r\n      commander_image: deck.commander_image,\r\n      user_id: user.uid,\r\n      list: deck.list,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n\r\n    db.collection(\"decks\")\r\n      .add(data)\r\n      .then((deck) => {\r\n        assignDeckToUser(deck, data);\r\n        createNewLog(deck);\r\n      });\r\n\r\n    handleSnackbarOpen(\"success\", \"Deck added!\");\r\n  };\r\n\r\n  const assignDeckToUser = (deck, data) => {\r\n    //console.log(deck, data);\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .collection(\"decks\")\r\n      .doc(deck.id)\r\n      .set({\r\n        deck_name: deckName ? deckName : data.commander_name,\r\n        commander_name: data.commander_name,\r\n        commander_id: data.commander_id,\r\n        commander_image: data.commander_image,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then(() => {\r\n        history.push(\"/d/\" + deck.id);\r\n      });\r\n  };\r\n\r\n  const createNewLog = (deck) => {\r\n    db.collection(\"deckLogs\").doc(deck.id).set({\r\n      timestamp: new Date(),\r\n      log: [],\r\n    });\r\n  };\r\n\r\n  const modalBody = (\r\n    <div style={modalStyle} className={classes.paper + \" modal\"}>\r\n      <h2 className=\"modal__title\">Delete Deck</h2>\r\n      <p className=\"modal__description\">\r\n        Are you sure you want to delete this deck? This action cannot be undone.\r\n      </p>\r\n      <div className=\"modal__actions\">\r\n        <div className=\"modal__action modal__action--delete\">\r\n          <Button onClick={deleteDeck} variant=\"contained\" color=\"primary\">\r\n            Delete Deck\r\n          </Button>\r\n        </div>\r\n        <div className=\"modal__action\">\r\n          <Button onClick={handleModalClose} variant=\"contained\">\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"deck__preview\">\r\n        {editTitle ? (\r\n          <TextField\r\n            label=\"Deck Name\"\r\n            variant=\"outlined\"\r\n            name=\"deckName\"\r\n            type=\"text\"\r\n            value={deckName}\r\n            onChange={handleDeckNameChange}\r\n          />\r\n        ) : (\r\n          <h2 className=\"deck__name\">\r\n            {deck.deck_name ? deck.deck_name : \"New Deck\"}\r\n            {canEdit ? (\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  setEditTitle(true);\r\n                }}\r\n              >\r\n                Edit\r\n              </Button>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </h2>\r\n        )}\r\n        <div className=\"deck__image\">\r\n          <img\r\n            className=\"decks__commander\"\r\n            src={\r\n              previewImage\r\n                ? previewImage\r\n                : deck.commander_image\r\n                ? deck.commander_image\r\n                : \"/card_back.jpg\"\r\n            }\r\n            alt={deck.commander}\r\n            key={deck.commander}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"deck__decklist\">\r\n        {!loading ? (\r\n          <div className=\"decklist\">\r\n            <div className=\"decklist__main\">\r\n              {Object.keys(list).map((key) => (\r\n                <React.Fragment key={key}>\r\n                  {Array.isArray(list[key]) && list[key].length ? (\r\n                    <div className=\"decklist__section decklist__section--title\">\r\n                      <h2 className=\"decklist__title\">\r\n                        {getSectionTitle(key)} ({list[key + \"_quantity\"]})\r\n                      </h2>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  {Array.isArray(list[key]) &&\r\n                    list[key].map((section, sectionKey) => (\r\n                      <div\r\n                        className=\"decklist__section\"\r\n                        key={section.type + section.quantity}\r\n                      >\r\n                        <h3 className=\"decklist__subtitle\">\r\n                          {section.type} ({section.quantity})\r\n                        </h3>\r\n                        <ul>\r\n                          {section.cards.map((card, cardKey) => (\r\n                            <li\r\n                              className=\"decklist__item\"\r\n                              key={cardKey}\r\n                              onMouseEnter={() => {\r\n                                setPreviewImage(card.image);\r\n                              }}\r\n                              onMouseLeave={() => {\r\n                                setPreviewImage(\"\");\r\n                              }}\r\n                            >\r\n                              <span className=\"decklist__quantity\">\r\n                                {canEdit || isNewDeck ? (\r\n                                  <AddCircleIcon\r\n                                    className=\"decklist__button decklist__button--add\"\r\n                                    onClick={() =>\r\n                                      addCard(card, key, sectionKey, cardKey)\r\n                                    }\r\n                                  ></AddCircleIcon>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                                <span className=\"decklist__quantity-number\">\r\n                                  {card.quantity}\r\n                                </span>\r\n                                {canEdit || isNewDeck ? (\r\n                                  <RemoveCircleIcon\r\n                                    className=\"decklist__button decklist__button--remove\"\r\n                                    onClick={() =>\r\n                                      removeCard(card, key, sectionKey, cardKey)\r\n                                    }\r\n                                  ></RemoveCircleIcon>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </span>\r\n                              <span className=\"decklist__card-name\">\r\n                                {card.name}\r\n                              </span>\r\n                              <span className=\"decklist__mana\">\r\n                                {card.mana_cost\r\n                                  ? parseTextForSymbols(card.mana_cost).map(\r\n                                      (item, i) => {\r\n                                        if (item === \"|\") {\r\n                                          return (\r\n                                            <span className=\"decklist__mana-split\">\r\n                                              {\"//\"}\r\n                                            </span>\r\n                                          );\r\n                                        } else {\r\n                                          return (\r\n                                            <Mana\r\n                                              key={i}\r\n                                              symbol={item}\r\n                                              shadow\r\n                                              fixed\r\n                                              size=\"1x\"\r\n                                            />\r\n                                          );\r\n                                        }\r\n                                      }\r\n                                    )\r\n                                  : \"\"}\r\n                              </span>\r\n                            </li>\r\n                          ))}\r\n                        </ul>\r\n                      </div>\r\n                    ))}\r\n                </React.Fragment>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      {canEdit || isNewDeck ? (\r\n        <>\r\n          <div className=\"deck__actions deck__actions--bottom\">\r\n            <div className=\"deck__action\">\r\n              <Button\r\n                type=\"submit\"\r\n                onClick={isNewDeck ? saveNewDeck : saveDeck}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                {isNewDeck ? \"Save New Deck\" : \"Save Changes\"}\r\n              </Button>\r\n            </div>\r\n            {!isNewDeck ? (\r\n              <div className=\"deck__action deck__action--delete\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  onClick={deleteDeckCheck}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Delete Deck\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n          <Modal\r\n            open={modalOpen}\r\n            onClose={handleModalClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n          >\r\n            {modalBody}\r\n          </Modal>\r\n          <Snackbar\r\n            open={openSnackbar}\r\n            autoHideDuration={4000}\r\n            onClose={handleSnackbarClose}\r\n          >\r\n            <Alert onClose={handleSnackbarClose} severity={snackbarStatus}>\r\n              <>{snackbarMessage}</>\r\n            </Alert>\r\n          </Snackbar>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <Search />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\DeckTabs.js",[],"F:\\react-apps\\deck-checker\\src\\views\\Deck\\components\\DeckTabs\\Logs\\Logs.js",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"136"},{"ruleId":"134","replacedBy":"137"},{"ruleId":"132","replacedBy":"138"},{"ruleId":"134","replacedBy":"139"},{"ruleId":"132","replacedBy":"140"},{"ruleId":"134","replacedBy":"141"},{"ruleId":"132","replacedBy":"142"},{"ruleId":"134","replacedBy":"143"},{"ruleId":"132","replacedBy":"144"},{"ruleId":"134","replacedBy":"145"},{"ruleId":"132","replacedBy":"146"},{"ruleId":"134","replacedBy":"147"},{"ruleId":"132","replacedBy":"148"},{"ruleId":"134","replacedBy":"149"},{"ruleId":"132","replacedBy":"150"},{"ruleId":"134","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":7,"column":10,"nodeType":"154","messageId":"155","endLine":7,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":55,"column":26,"nodeType":"154","messageId":"155","endLine":55,"endColumn":35},{"ruleId":"152","severity":1,"message":"157","line":55,"column":37,"nodeType":"154","messageId":"155","endLine":55,"endColumn":49},{"ruleId":"152","severity":1,"message":"158","line":56,"column":20,"nodeType":"154","messageId":"155","endLine":56,"endColumn":23},{"ruleId":"152","severity":1,"message":"159","line":56,"column":25,"nodeType":"154","messageId":"155","endLine":56,"endColumn":31},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],["160"],["161"],["160"],["161"],["160"],["161"],["160"],["161"],["160"],["161"],["160"],["161"],["160"],["161"],["160"],["161"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'updateLog' is assigned a value but never used.","'setUpdateLog' is assigned a value but never used.","'log' is assigned a value but never used.","'setLog' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]